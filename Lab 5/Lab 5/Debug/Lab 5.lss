
Lab 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000086f  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000764  00000000  00000000  00000b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038b  00000000  00000000  0000126b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000015f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e5  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  00001a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001aa1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  78:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>
#include "Servo.h"

void ADC_init() {
	ADMUX = (1 << REFS0) | 0x07; // AVcc como referencia y usar ADC7 (A7)
  80:	87 e4       	ldi	r24, 0x47	; 71
  82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0); // Prescaler de 8
  86:	83 e8       	ldi	r24, 0x83	; 131
  88:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  8c:	08 95       	ret

0000008e <ADC_read>:
}

uint16_t ADC_read() {
	ADCSRA |= (1 << ADSC); // Iniciar conversión
  8e:	ea e7       	ldi	r30, 0x7A	; 122
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	80 64       	ori	r24, 0x40	; 64
  96:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // Esperar a que termine
  98:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9c:	86 fd       	sbrc	r24, 6
  9e:	fc cf       	rjmp	.-8      	; 0x98 <ADC_read+0xa>
	return ADC; // Leer el resultado
  a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  a4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  a8:	08 95       	ret

000000aa <main>:

int main(void) {
	ADC_init();
  aa:	0e 94 40 00 	call	0x80	; 0x80 <ADC_init>
	PWM_init();
  ae:	0e 94 70 00 	call	0xe0	; 0xe0 <PWM_init>

	while (1) {
		uint16_t adc = ADC_read(); // 0 - 1023
  b2:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_read>
		uint8_t angle = adc * 180UL / 1023; // Mapear a 0-180 grados
  b6:	9c 01       	movw	r18, r24
  b8:	a4 eb       	ldi	r26, 0xB4	; 180
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	0e 94 ad 00 	call	0x15a	; 0x15a <__umulhisi3>
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	33 e0       	ldi	r19, 0x03	; 3
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	0e 94 8b 00 	call	0x116	; 0x116 <__udivmodsi4>
  cc:	82 2f       	mov	r24, r18
		PWM_setAngle(angle);
  ce:	0e 94 80 00 	call	0x100	; 0x100 <PWM_setAngle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	87 ea       	ldi	r24, 0xA7	; 167
  d4:	91 e6       	ldi	r25, 0x61	; 97
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x2c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x32>
  dc:	00 00       	nop
  de:	e9 cf       	rjmp	.-46     	; 0xb2 <main+0x8>

000000e0 <PWM_init>:
 */ 
#include "Servo.h"

void PWM_init() {
	// Fast PWM, modo 14: TOP = ICR1
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
  e0:	82 e8       	ldi	r24, 0x82	; 130
  e2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // prescaler 8
  e6:	8a e1       	ldi	r24, 0x1A	; 26
  e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = 40000; // TOP = 20 ms con reloj de 16MHz y prescaler 8
  ec:	80 e4       	ldi	r24, 0x40	; 64
  ee:	9c e9       	ldi	r25, 0x9C	; 156
  f0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  f4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB |= (1 << PB1); // OC1A (D9) como salida
  f8:	84 b1       	in	r24, 0x04	; 4
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	84 b9       	out	0x04, r24	; 4
  fe:	08 95       	ret

00000100 <PWM_setAngle>:
}

void PWM_setAngle(uint8_t angle) {
	// Mapear 0-180° a 1-2 ms ? 2000 a 4000 ticks (0.5 us cada tick)
	uint16_t ticks = 2000 + (angle * 11); // 11 = (2000/180)
 100:	2b e0       	ldi	r18, 0x0B	; 11
 102:	82 9f       	mul	r24, r18
 104:	c0 01       	movw	r24, r0
 106:	11 24       	eor	r1, r1
 108:	80 53       	subi	r24, 0x30	; 48
 10a:	98 4f       	sbci	r25, 0xF8	; 248
	OCR1A = ticks;
 10c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 110:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 114:	08 95       	ret

00000116 <__udivmodsi4>:
 116:	a1 e2       	ldi	r26, 0x21	; 33
 118:	1a 2e       	mov	r1, r26
 11a:	aa 1b       	sub	r26, r26
 11c:	bb 1b       	sub	r27, r27
 11e:	fd 01       	movw	r30, r26
 120:	0d c0       	rjmp	.+26     	; 0x13c <__udivmodsi4_ep>

00000122 <__udivmodsi4_loop>:
 122:	aa 1f       	adc	r26, r26
 124:	bb 1f       	adc	r27, r27
 126:	ee 1f       	adc	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	a2 17       	cp	r26, r18
 12c:	b3 07       	cpc	r27, r19
 12e:	e4 07       	cpc	r30, r20
 130:	f5 07       	cpc	r31, r21
 132:	20 f0       	brcs	.+8      	; 0x13c <__udivmodsi4_ep>
 134:	a2 1b       	sub	r26, r18
 136:	b3 0b       	sbc	r27, r19
 138:	e4 0b       	sbc	r30, r20
 13a:	f5 0b       	sbc	r31, r21

0000013c <__udivmodsi4_ep>:
 13c:	66 1f       	adc	r22, r22
 13e:	77 1f       	adc	r23, r23
 140:	88 1f       	adc	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	1a 94       	dec	r1
 146:	69 f7       	brne	.-38     	; 0x122 <__udivmodsi4_loop>
 148:	60 95       	com	r22
 14a:	70 95       	com	r23
 14c:	80 95       	com	r24
 14e:	90 95       	com	r25
 150:	9b 01       	movw	r18, r22
 152:	ac 01       	movw	r20, r24
 154:	bd 01       	movw	r22, r26
 156:	cf 01       	movw	r24, r30
 158:	08 95       	ret

0000015a <__umulhisi3>:
 15a:	a2 9f       	mul	r26, r18
 15c:	b0 01       	movw	r22, r0
 15e:	b3 9f       	mul	r27, r19
 160:	c0 01       	movw	r24, r0
 162:	a3 9f       	mul	r26, r19
 164:	70 0d       	add	r23, r0
 166:	81 1d       	adc	r24, r1
 168:	11 24       	eor	r1, r1
 16a:	91 1d       	adc	r25, r1
 16c:	b2 9f       	mul	r27, r18
 16e:	70 0d       	add	r23, r0
 170:	81 1d       	adc	r24, r1
 172:	11 24       	eor	r1, r1
 174:	91 1d       	adc	r25, r1
 176:	08 95       	ret

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
