
Lab 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000031a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b12  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e0  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b4  00000000  00000000  0000182e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047e  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e8  00000000  00000000  00002366  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000244e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  88:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
#include "Servo.h"
#include "Servo2.h"
#include "PWMManual.h"

void ADC_init() {
	ADMUX = (1 << REFS0);
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0); // Prescaler 8
  96:	83 e8       	ldi	r24, 0x83	; 131
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9c:	08 95       	ret

0000009e <ADC_read>:
}

uint16_t ADC_read(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	90 81       	ld	r25, Z
  a4:	90 7f       	andi	r25, 0xF0	; 240
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	89 2b       	or	r24, r25
  aa:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ba:	86 fd       	sbrc	r24, 6
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <ADC_read+0x18>
	return ADC;
  be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  c6:	08 95       	ret

000000c8 <main>:

int main(void) {
	ADC_init();
  c8:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	PWM_init();
  cc:	0e 94 b5 00 	call	0x16a	; 0x16a <PWM_init>
	PWM2_init();
  d0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <PWM2_init>
	PWMManual_init();
  d4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <PWMManual_init>

	// Configurar ICR1 solo una vez
	TCCR1B |= (1 << WGM13);
  d8:	e1 e8       	ldi	r30, 0x81	; 129
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	80 83       	st	Z, r24
	ICR1 = 40000;
  e2:	80 e4       	ldi	r24, 0x40	; 64
  e4:	9c e9       	ldi	r25, 0x9C	; 156
  e6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  ea:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	while (1) {
		uint8_t angle1 = ADC_read(0) * 180UL / 1023;
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_read>
  f4:	9c 01       	movw	r18, r24
  f6:	a4 eb       	ldi	r26, 0xB4	; 180
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	0e 94 42 01 	call	0x284	; 0x284 <__umulhisi3>
  fe:	0f 2e       	mov	r0, r31
 100:	cc 24       	eor	r12, r12
 102:	ca 94       	dec	r12
 104:	f3 e0       	ldi	r31, 0x03	; 3
 106:	df 2e       	mov	r13, r31
 108:	e1 2c       	mov	r14, r1
 10a:	f1 2c       	mov	r15, r1
 10c:	f0 2d       	mov	r31, r0
 10e:	a7 01       	movw	r20, r14
 110:	96 01       	movw	r18, r12
 112:	0e 94 20 01 	call	0x240	; 0x240 <__udivmodsi4>
 116:	c2 2f       	mov	r28, r18
		uint8_t angle2 = ADC_read(1) * 180UL / 1023;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_read>
 11e:	9c 01       	movw	r18, r24
 120:	a4 eb       	ldi	r26, 0xB4	; 180
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	0e 94 42 01 	call	0x284	; 0x284 <__umulhisi3>
 128:	a7 01       	movw	r20, r14
 12a:	96 01       	movw	r18, r12
 12c:	0e 94 20 01 	call	0x240	; 0x240 <__udivmodsi4>
 130:	d2 2e       	mov	r13, r18
		uint8_t brightness = ADC_read(2) / 4; // Escalar a 0–255
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_read>
 138:	7c 01       	movw	r14, r24
 13a:	f6 94       	lsr	r15
 13c:	e7 94       	ror	r14
 13e:	f6 94       	lsr	r15
 140:	e7 94       	ror	r14

		PWM_setAngle(angle1);
 142:	8c 2f       	mov	r24, r28
 144:	0e 94 c5 00 	call	0x18a	; 0x18a <PWM_setAngle>
		PWM2_setAngle(angle2);
 148:	8d 2d       	mov	r24, r13
 14a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <PWM2_setAngle>
		PWMManual_setLevel(brightness);
 14e:	c7 01       	movw	r24, r14
 150:	99 27       	eor	r25, r25
 152:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <PWMManual_setLevel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	81 ee       	ldi	r24, 0xE1	; 225
 15a:	94 e0       	ldi	r25, 0x04	; 4
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x94>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x9e>
 166:	00 00       	nop
 168:	c2 cf       	rjmp	.-124    	; 0xee <main+0x26>

0000016a <PWM_init>:
 */ 
#include "Servo.h"

void PWM_init() {
	// Fast PWM, modo 14: TOP = ICR1
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 16a:	82 e8       	ldi	r24, 0x82	; 130
 16c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // prescaler 8
 170:	8a e1       	ldi	r24, 0x1A	; 26
 172:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = 40000; // TOP = 20 ms con reloj de 16MHz y prescaler 8
 176:	80 e4       	ldi	r24, 0x40	; 64
 178:	9c e9       	ldi	r25, 0x9C	; 156
 17a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 17e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB |= (1 << PB1); // OC1A (D9) como salida
 182:	84 b1       	in	r24, 0x04	; 4
 184:	82 60       	ori	r24, 0x02	; 2
 186:	84 b9       	out	0x04, r24	; 4
 188:	08 95       	ret

0000018a <PWM_setAngle>:
}

void PWM_setAngle(uint8_t angle) {
	// Mapear 0-180° a 1-2 ms ? 2000 a 4000 ticks (0.5 us cada tick)
	uint16_t ticks = 4000 + (angle * 11); // 11 = (2000/180)
 18a:	2b e0       	ldi	r18, 0x0B	; 11
 18c:	82 9f       	mul	r24, r18
 18e:	c0 01       	movw	r24, r0
 190:	11 24       	eor	r1, r1
 192:	80 56       	subi	r24, 0x60	; 96
 194:	90 4f       	sbci	r25, 0xF0	; 240
	OCR1A = ticks;
 196:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 19a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 19e:	08 95       	ret

000001a0 <PWM2_init>:
 */ 
#include "Servo2.h"

void PWM2_init() {
	// Activar OC1B (PB2), usar modo Fast PWM con TOP en ICR1
	TCCR1A |= (1 << COM1B1); // No invertido
 1a0:	e0 e8       	ldi	r30, 0x80	; 128
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 62       	ori	r24, 0x20	; 32
 1a8:	80 83       	st	Z, r24
	DDRB |= (1 << PB2); // PB2 como salida (OC1B)
 1aa:	84 b1       	in	r24, 0x04	; 4
 1ac:	84 60       	ori	r24, 0x04	; 4
 1ae:	84 b9       	out	0x04, r24	; 4
 1b0:	08 95       	ret

000001b2 <PWM2_setAngle>:
}

void PWM2_setAngle(uint8_t angle) {
	uint16_t ticks = 2000 + (angle * 11); // Mapear 0°–180° a 2000–4000 ticks
 1b2:	2b e0       	ldi	r18, 0x0B	; 11
 1b4:	82 9f       	mul	r24, r18
 1b6:	c0 01       	movw	r24, r0
 1b8:	11 24       	eor	r1, r1
 1ba:	80 53       	subi	r24, 0x30	; 48
 1bc:	98 4f       	sbci	r25, 0xF8	; 248
	OCR1B = ticks;
 1be:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1c2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1c6:	08 95       	ret

000001c8 <PWMManual_init>:

volatile uint8_t setpoint = 0;
volatile uint8_t count = 0;

void PWMManual_init() {
	DDRD |= (1 << PD6); // D6 como salida
 1c8:	8a b1       	in	r24, 0x0a	; 10
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	8a b9       	out	0x0a, r24	; 10

	TCCR0A = (1 << WGM01); // Modo CTC
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); // Prescaler 64
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	85 bd       	out	0x25, r24	; 37
	OCR0A = 25; // 25 ticks = 0.1 ms 100 Hz PWM con count hasta 100
 1d6:	89 e1       	ldi	r24, 0x19	; 25
 1d8:	87 bd       	out	0x27, r24	; 39

	TIMSK0 |= (1 << OCIE0A); // Habilita interrupción
 1da:	ee e6       	ldi	r30, 0x6E	; 110
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	80 83       	st	Z, r24
	sei();
 1e4:	78 94       	sei
 1e6:	08 95       	ret

000001e8 <PWMManual_setLevel>:
}

void PWMManual_setLevel(uint8_t value) {
	if (value > 100) value = 100;
 1e8:	85 36       	cpi	r24, 0x65	; 101
 1ea:	08 f0       	brcs	.+2      	; 0x1ee <PWMManual_setLevel+0x6>
 1ec:	84 e6       	ldi	r24, 0x64	; 100
	setpoint = value;
 1ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <setpoint>
 1f2:	08 95       	ret

000001f4 <__vector_14>:
}

ISR(TIMER0_COMPA_vect) {
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
	if (count < setpoint) {
 202:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 206:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <setpoint>
 20a:	98 17       	cp	r25, r24
 20c:	20 f4       	brcc	.+8      	; 0x216 <__vector_14+0x22>
		PORTD |= (1 << PD6); // LED ON
 20e:	8b b1       	in	r24, 0x0b	; 11
 210:	80 64       	ori	r24, 0x40	; 64
 212:	8b b9       	out	0x0b, r24	; 11
 214:	03 c0       	rjmp	.+6      	; 0x21c <__vector_14+0x28>
		} else {
		PORTD &= ~(1 << PD6); // LED OFF
 216:	8b b1       	in	r24, 0x0b	; 11
 218:	8f 7b       	andi	r24, 0xBF	; 191
 21a:	8b b9       	out	0x0b, r24	; 11
	}

	count++;
 21c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (count >= 100) count = 0;
 226:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 22a:	84 36       	cpi	r24, 0x64	; 100
 22c:	10 f0       	brcs	.+4      	; 0x232 <__vector_14+0x3e>
 22e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <__udivmodsi4>:
 240:	a1 e2       	ldi	r26, 0x21	; 33
 242:	1a 2e       	mov	r1, r26
 244:	aa 1b       	sub	r26, r26
 246:	bb 1b       	sub	r27, r27
 248:	fd 01       	movw	r30, r26
 24a:	0d c0       	rjmp	.+26     	; 0x266 <__udivmodsi4_ep>

0000024c <__udivmodsi4_loop>:
 24c:	aa 1f       	adc	r26, r26
 24e:	bb 1f       	adc	r27, r27
 250:	ee 1f       	adc	r30, r30
 252:	ff 1f       	adc	r31, r31
 254:	a2 17       	cp	r26, r18
 256:	b3 07       	cpc	r27, r19
 258:	e4 07       	cpc	r30, r20
 25a:	f5 07       	cpc	r31, r21
 25c:	20 f0       	brcs	.+8      	; 0x266 <__udivmodsi4_ep>
 25e:	a2 1b       	sub	r26, r18
 260:	b3 0b       	sbc	r27, r19
 262:	e4 0b       	sbc	r30, r20
 264:	f5 0b       	sbc	r31, r21

00000266 <__udivmodsi4_ep>:
 266:	66 1f       	adc	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	88 1f       	adc	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	1a 94       	dec	r1
 270:	69 f7       	brne	.-38     	; 0x24c <__udivmodsi4_loop>
 272:	60 95       	com	r22
 274:	70 95       	com	r23
 276:	80 95       	com	r24
 278:	90 95       	com	r25
 27a:	9b 01       	movw	r18, r22
 27c:	ac 01       	movw	r20, r24
 27e:	bd 01       	movw	r22, r26
 280:	cf 01       	movw	r24, r30
 282:	08 95       	ret

00000284 <__umulhisi3>:
 284:	a2 9f       	mul	r26, r18
 286:	b0 01       	movw	r22, r0
 288:	b3 9f       	mul	r27, r19
 28a:	c0 01       	movw	r24, r0
 28c:	a3 9f       	mul	r26, r19
 28e:	70 0d       	add	r23, r0
 290:	81 1d       	adc	r24, r1
 292:	11 24       	eor	r1, r1
 294:	91 1d       	adc	r25, r1
 296:	b2 9f       	mul	r27, r18
 298:	70 0d       	add	r23, r0
 29a:	81 1d       	adc	r24, r1
 29c:	11 24       	eor	r1, r1
 29e:	91 1d       	adc	r25, r1
 2a0:	08 95       	ret

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
