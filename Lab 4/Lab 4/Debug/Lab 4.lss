
Lab 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000024e  000002e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  000002f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b1  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000761  00000000  00000000  00000c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cd  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001784  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e0  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017b  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001d5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  9e:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
}


void initADC(void) 
{
	ADMUX =0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX2) | (1 << MUX1) | (1 << MUX0);
  b8:	80 81       	ld	r24, Z
  ba:	87 60       	ori	r24, 0x07	; 7
  bc:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS1) | (1 << ADPS0);
  c4:	80 81       	ld	r24, Z
  c6:	8b 68       	ori	r24, 0x8B	; 139
  c8:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADSC);
  ca:	80 81       	ld	r24, Z
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	80 83       	st	Z, r24
  d0:	08 95       	ret

000000d2 <setup>:
/****************************************/
// NON-Interrupt subroutines
void setup(void) {
	
	// Configure PORTD as output for LEDs (8 bits)
	DDRD = 0xFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a b9       	out	0x0a, r24	; 10
	
	// Configure buttons as inputs with pull-ups
	DDRB &= ~((1 << INCREMENT_BUTTON) | (1 << DECREMENT_BUTTON));
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	8c 7f       	andi	r24, 0xFC	; 252
  da:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << DDD3) | (1 << DDD2);
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	8c 60       	ori	r24, 0x0C	; 12
  e0:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << INCREMENT_BUTTON) | (1 << DECREMENT_BUTTON);
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	83 60       	ori	r24, 0x03	; 3
  e6:	85 b9       	out	0x05, r24	; 5
	
	// Initialize counter to 0
	counter = 0;
  e8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <counter>
	PORTD = counter;
  ec:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <counter>
  f0:	8b b9       	out	0x0b, r24	; 11
	
	cli();
  f2:	f8 94       	cli
	CLKPR = (1 << CLKPCE);
  f4:	e1 e6       	ldi	r30, 0x61	; 97
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	80 83       	st	Z, r24
	CLKPR = (1 << CLKPS2);
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	80 83       	st	Z, r24
		
	UCSR0B = 0x00;
 100:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	initADC();
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	sei();
 108:	78 94       	sei
	
	DDRC |= (1 << ALARM_LED);  // Configurar LED como salida
 10a:	87 b1       	in	r24, 0x07	; 7
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << ALARM_LED);  // Asegurarse que inicia apagado
 110:	88 b1       	in	r24, 0x08	; 8
 112:	8e 7f       	andi	r24, 0xFE	; 254
 114:	88 b9       	out	0x08, r24	; 8
 116:	08 95       	ret

00000118 <debounce>:
	
	ADCSRA |= (1 << ADSC);
}

uint8_t debounce(uint8_t pin) {
	if (!(PINB & (1 << pin))) { // If button is pressed (LOW)
 118:	23 b1       	in	r18, 0x03	; 3
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	08 2e       	mov	r0, r24
 11e:	02 c0       	rjmp	.+4      	; 0x124 <debounce+0xc>
 120:	35 95       	asr	r19
 122:	27 95       	ror	r18
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <debounce+0x8>
 128:	20 fd       	sbrc	r18, 0
 12a:	12 c0       	rjmp	.+36     	; 0x150 <debounce+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	e3 ed       	ldi	r30, 0xD3	; 211
 12e:	f0 e3       	ldi	r31, 0x30	; 48
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <debounce+0x18>
 134:	00 c0       	rjmp	.+0      	; 0x136 <debounce+0x1e>
 136:	00 00       	nop
		_delay_ms(DEBOUNCE_DELAY);
		if (!(PINB & (1 << pin))) { // Verify after delay
 138:	23 b1       	in	r18, 0x03	; 3
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	a9 01       	movw	r20, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <debounce+0x2c>
 140:	55 95       	asr	r21
 142:	47 95       	ror	r20
 144:	8a 95       	dec	r24
 146:	e2 f7       	brpl	.-8      	; 0x140 <debounce+0x28>
 148:	40 fd       	sbrc	r20, 0
 14a:	04 c0       	rjmp	.+8      	; 0x154 <debounce+0x3c>
			return 1; // Button truly pressed
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	08 95       	ret
		}
	}
	return 0; // Not pressed or bounce
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret
 154:	80 e0       	ldi	r24, 0x00	; 0
}
 156:	08 95       	ret

00000158 <main>:
void initADC(void);

/****************************************/
// Main Function
int main(void) {
	setup();
 158:	0e 94 69 00 	call	0xd2	; 0xd2 <setup>
	
	while(1) {
		// Increment counter if increment button pressed
		if (debounce(INCREMENT_BUTTON)) {
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 8c 00 	call	0x118	; 0x118 <debounce>
 162:	88 23       	and	r24, r24
 164:	39 f0       	breq	.+14     	; 0x174 <main+0x1c>
			counter++;
 166:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <counter>
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <counter>
			while (!(PINB & (1 << INCREMENT_BUTTON))); // Wait for button release
 170:	18 9b       	sbis	0x03, 0	; 3
 172:	fe cf       	rjmp	.-4      	; 0x170 <main+0x18>
		}
		
		// Decrement counter if decrement button pressed
		if (debounce(DECREMENT_BUTTON)) {
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 8c 00 	call	0x118	; 0x118 <debounce>
 17a:	88 23       	and	r24, r24
 17c:	39 f0       	breq	.+14     	; 0x18c <main+0x34>
			counter--;
 17e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <counter>
 182:	81 50       	subi	r24, 0x01	; 1
 184:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <counter>
			while (!(PINB & (1 << DECREMENT_BUTTON))); // Wait for button release
 188:	19 9b       	sbis	0x03, 1	; 3
 18a:	fe cf       	rjmp	.-4      	; 0x188 <main+0x30>
		}
		
		if (valorADC > counter) {
 18c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
 190:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <counter>
 194:	89 17       	cp	r24, r25
 196:	20 f4       	brcc	.+8      	; 0x1a0 <main+0x48>
			PORTC |= (1 << ALARM_LED); // Encender LED de alarma
 198:	88 b1       	in	r24, 0x08	; 8
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	88 b9       	out	0x08, r24	; 8
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <main+0x4e>
			} else {
			PORTC &= ~(1 << ALARM_LED); // Apagar LED
 1a0:	88 b1       	in	r24, 0x08	; 8
 1a2:	8e 7f       	andi	r24, 0xFE	; 254
 1a4:	88 b9       	out	0x08, r24	; 8
		}
		
		// Mostrar contador por 5ms
		PORTB &= ~(1 << PORTB2);
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	8b 7f       	andi	r24, 0xFB	; 251
 1aa:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PORTB3);
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	87 7f       	andi	r24, 0xF7	; 247
 1b0:	85 b9       	out	0x05, r24	; 5
		PORTD = counter;
 1b2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <counter>
 1b6:	8b b9       	out	0x0b, r24	; 11
 1b8:	81 ee       	ldi	r24, 0xE1	; 225
 1ba:	94 e0       	ldi	r25, 0x04	; 4
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x64>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x6a>
 1c2:	00 00       	nop
		_delay_ms(5);
		// Mostrar ADC en Display 1 por 5ms
		PORTB &= ~(1 << PORTB2);
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	8b 7f       	andi	r24, 0xFB	; 251
 1c8:	85 b9       	out	0x05, r24	; 5
		PORTD = tabla[valorADC & 0x0F]; // 0bxxxx xxxx 0x##
 1ca:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 1ce:	ef 70       	andi	r30, 0x0F	; 15
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	e0 50       	subi	r30, 0x00	; 0
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	80 81       	ld	r24, Z
 1d8:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (1 << PORTB3);
 1da:	85 b1       	in	r24, 0x05	; 5
 1dc:	88 60       	ori	r24, 0x08	; 8
 1de:	85 b9       	out	0x05, r24	; 5
 1e0:	81 ee       	ldi	r24, 0xE1	; 225
 1e2:	94 e0       	ldi	r25, 0x04	; 4
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <main+0x8c>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x92>
 1ea:	00 00       	nop
		_delay_ms(5);
		// Mostrar ADC en Display 2 por 5ms
		PORTB &= ~(1 << PORTB3);
 1ec:	85 b1       	in	r24, 0x05	; 5
 1ee:	87 7f       	andi	r24, 0xF7	; 247
 1f0:	85 b9       	out	0x05, r24	; 5
		PORTD = tabla[valorADC >> 4];
 1f2:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 1f6:	e2 95       	swap	r30
 1f8:	ef 70       	andi	r30, 0x0F	; 15
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	e0 50       	subi	r30, 0x00	; 0
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	80 81       	ld	r24, Z
 202:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (1 << PORTB2);
 204:	85 b1       	in	r24, 0x05	; 5
 206:	84 60       	ori	r24, 0x04	; 4
 208:	85 b9       	out	0x05, r24	; 5
 20a:	81 ee       	ldi	r24, 0xE1	; 225
 20c:	94 e0       	ldi	r25, 0x04	; 4
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <main+0xb6>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0xbc>
 214:	00 00       	nop
 216:	a2 cf       	rjmp	.-188    	; 0x15c <main+0x4>

00000218 <__vector_21>:
}

/****************************************/
// Interrupt routines
ISR(ADC_vect)
{
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	8f 93       	push	r24
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
		valorADC = ADCH;
 228:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 22c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		ADCSRA |= (1 << ADSC);
 230:	ea e7       	ldi	r30, 0x7A	; 122
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	80 64       	ori	r24, 0x40	; 64
 238:	80 83       	st	Z, r24
}
 23a:	ff 91       	pop	r31
 23c:	ef 91       	pop	r30
 23e:	8f 91       	pop	r24
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
