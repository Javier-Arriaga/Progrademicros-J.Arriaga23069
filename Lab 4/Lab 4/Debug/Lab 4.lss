
Lab 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079d  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000702  00000000  00000000  00000a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f3  00000000  00000000  00001103  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  000013f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bf  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c8  00000000  00000000  00001817  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000018df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 76 00 	call	0xec	; 0xec <main>
  88:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:

/****************************************/
// NON-Interrupt subroutines
void setup(void) {
	// Configure PORTD as output for LEDs (8 bits)
	DDRD = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	
	// Configure buttons as inputs with pull-ups
	DDRB &= ~((1 << INCREMENT_BUTTON) | (1 << DECREMENT_BUTTON));
  94:	84 b1       	in	r24, 0x04	; 4
  96:	8c 7f       	andi	r24, 0xFC	; 252
  98:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << INCREMENT_BUTTON) | (1 << DECREMENT_BUTTON);
  9a:	85 b1       	in	r24, 0x05	; 5
  9c:	83 60       	ori	r24, 0x03	; 3
  9e:	85 b9       	out	0x05, r24	; 5
	
	// Initialize counter to 0
	counter = 0;
  a0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTD = counter;
  a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a8:	8b b9       	out	0x0b, r24	; 11
  aa:	08 95       	ret

000000ac <debounce>:
}

uint8_t debounce(uint8_t pin) {
	if (!(PINB & (1 << pin))) { // If button is pressed (LOW)
  ac:	23 b1       	in	r18, 0x03	; 3
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	08 2e       	mov	r0, r24
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <debounce+0xc>
  b4:	35 95       	asr	r19
  b6:	27 95       	ror	r18
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <debounce+0x8>
  bc:	20 fd       	sbrc	r18, 0
  be:	12 c0       	rjmp	.+36     	; 0xe4 <debounce+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	e3 ed       	ldi	r30, 0xD3	; 211
  c2:	f0 e3       	ldi	r31, 0x30	; 48
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <debounce+0x18>
  c8:	00 c0       	rjmp	.+0      	; 0xca <debounce+0x1e>
  ca:	00 00       	nop
		_delay_ms(DEBOUNCE_DELAY);
		if (!(PINB & (1 << pin))) { // Verify after delay
  cc:	23 b1       	in	r18, 0x03	; 3
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	a9 01       	movw	r20, r18
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <debounce+0x2c>
  d4:	55 95       	asr	r21
  d6:	47 95       	ror	r20
  d8:	8a 95       	dec	r24
  da:	e2 f7       	brpl	.-8      	; 0xd4 <debounce+0x28>
  dc:	40 fd       	sbrc	r20, 0
  de:	04 c0       	rjmp	.+8      	; 0xe8 <debounce+0x3c>
			return 1; // Button truly pressed
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	08 95       	ret
		}
	}
	return 0; // Not pressed or bounce
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	08 95       	ret
  e8:	80 e0       	ldi	r24, 0x00	; 0
}
  ea:	08 95       	ret

000000ec <main>:
uint8_t debounce(uint8_t pin);

/****************************************/
// Main Function
int main(void) {
	setup();
  ec:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	
	while(1) {
		// Increment counter if increment button pressed
		if (debounce(INCREMENT_BUTTON)) {
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 56 00 	call	0xac	; 0xac <debounce>
  f6:	88 23       	and	r24, r24
  f8:	51 f0       	breq	.+20     	; 0x10e <main+0x22>
			counter++;
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	8f 5f       	subi	r24, 0xFF	; 255
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTD = counter;
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	8b b9       	out	0x0b, r24	; 11
			while (!(PINB & (1 << INCREMENT_BUTTON))); // Wait for button release
 10a:	18 9b       	sbis	0x03, 0	; 3
 10c:	fe cf       	rjmp	.-4      	; 0x10a <main+0x1e>
		}
		
		// Decrement counter if decrement button pressed
		if (debounce(DECREMENT_BUTTON)) {
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 56 00 	call	0xac	; 0xac <debounce>
 114:	88 23       	and	r24, r24
 116:	61 f3       	breq	.-40     	; 0xf0 <main+0x4>
			counter--;
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTD = counter;
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	8b b9       	out	0x0b, r24	; 11
			while (!(PINB & (1 << DECREMENT_BUTTON))); // Wait for button release
 128:	19 9b       	sbis	0x03, 1	; 3
 12a:	fe cf       	rjmp	.-4      	; 0x128 <main+0x3c>
 12c:	e1 cf       	rjmp	.-62     	; 0xf0 <main+0x4>

0000012e <__vector_3>:
}

/****************************************/
// Interrupt routines
// (Not used in this implementation but left as placeholder)
ISR(PCINT0_vect) {
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
	// Potential interrupt service routine for pin change
	// Not implemented in this version
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
