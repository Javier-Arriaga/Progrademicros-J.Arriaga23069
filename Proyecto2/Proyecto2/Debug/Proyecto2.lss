
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000027a  00800100  000007f4  00000888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080037a  0080037a  00000b02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001523  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4e  00000000  00000000  00002207  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bed  00000000  00000000  00002d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00003944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061d  00000000  00000000  00003c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ab  00000000  00000000  0000422d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000048d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 37       	cpi	r26, 0x7A	; 122
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	aa e7       	ldi	r26, 0x7A	; 122
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 37       	cpi	r26, 0x7F	; 127
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <main>
  9e:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ESCRITURA>:
 */ 

#include <avr/eeprom.h>

void ESCRITURA(uint8_t dato, uint16_t direccionEEPROM) {
    while (EECR & (1 << EEPE));       // Esperar si EEPROM está ocupada
  a6:	f9 99       	sbic	0x1f, 1	; 31
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <ESCRITURA>
    EEAR = direccionEEPROM;           // Establecer dirección de EEPROM
  aa:	72 bd       	out	0x22, r23	; 34
  ac:	61 bd       	out	0x21, r22	; 33
    EEDR = dato;                      // Colocar dato a escribir
  ae:	80 bd       	out	0x20, r24	; 32
    EECR |= (1 << EEMPE);             // Habilitar escritura (master)
  b0:	8f b3       	in	r24, 0x1f	; 31
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	8f bb       	out	0x1f, r24	; 31
    EECR |= (1 << EEPE);              // Iniciar escritura
  b6:	8f b3       	in	r24, 0x1f	; 31
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	8f bb       	out	0x1f, r24	; 31
  bc:	08 95       	ret

000000be <LECTURA>:
}

uint16_t LECTURA(uint16_t direccionEEPROM) {
    while (EECR & (1 << EEPE));       // Esperar si EEPROM está ocupada
  be:	f9 99       	sbic	0x1f, 1	; 31
  c0:	fe cf       	rjmp	.-4      	; 0xbe <LECTURA>
    EEAR = direccionEEPROM;           // Establecer dirección
  c2:	92 bd       	out	0x22, r25	; 34
  c4:	81 bd       	out	0x21, r24	; 33
    EECR |= (1 << EERE);              // Iniciar lectura
  c6:	8f b3       	in	r24, 0x1f	; 31
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8f bb       	out	0x1f, r24	; 31
    return EEDR;                      // Devolver dato leído
  cc:	80 b5       	in	r24, 0x20	; 32
}
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	08 95       	ret

000000d2 <ADC_init>:
volatile enum Mode current_mode = MANUAL;
volatile uint8_t valor = 0;
volatile char caracter;

void ADC_init() {
	ADMUX = (1 << REFS0);
  d2:	80 e4       	ldi	r24, 0x40	; 64
  d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0);
  d8:	83 e8       	ldi	r24, 0x83	; 131
  da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  de:	08 95       	ret

000000e0 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  e0:	ec e7       	ldi	r30, 0x7C	; 124
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	90 81       	ld	r25, Z
  e6:	90 7f       	andi	r25, 0xF0	; 240
  e8:	8f 70       	andi	r24, 0x0F	; 15
  ea:	89 2b       	or	r24, r25
  ec:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	85 e3       	ldi	r24, 0x35	; 53
  f0:	8a 95       	dec	r24
  f2:	f1 f7       	brne	.-4      	; 0xf0 <ADC_read+0x10>
  f4:	00 00       	nop
	_delay_us(10);
	ADCSRA |= (1 << ADSC);
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
 100:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 104:	86 fd       	sbrc	r24, 6
 106:	fc cf       	rjmp	.-8      	; 0x100 <ADC_read+0x20>
	return ADCW;
 108:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 10c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 110:	08 95       	ret

00000112 <button_init>:

void button_init() {
	DDRB &= ~(1 << MODO);
 112:	84 b1       	in	r24, 0x04	; 4
 114:	8e 7f       	andi	r24, 0xFE	; 254
 116:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << MODO);
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	85 b9       	out	0x05, r24	; 5
	DDRD &= ~((1 << GUARDADO1) | (1 << GUARDADO2) | (1 << GUARDADO3) | (1 << GUARDADO4));
 11e:	8a b1       	in	r24, 0x0a	; 10
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << GUARDADO1) | (1 << GUARDADO2) | (1 << GUARDADO3) | (1 << GUARDADO4);
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 6f       	ori	r24, 0xF0	; 240
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	08 95       	ret

0000012c <led_init>:
}

void led_init() {
	DDRD |= (1 << LED_MANUAL);
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << LED_UART);
 132:	84 b1       	in	r24, 0x04	; 4
 134:	80 61       	ori	r24, 0x10	; 16
 136:	84 b9       	out	0x04, r24	; 4
 138:	08 95       	ret

0000013a <Revisarboton>:
}

void Revisarboton() {
	static uint8_t button_pressed = 0;
	if (!(PINB & (1 << MODO))) {
 13a:	18 99       	sbic	0x03, 0	; 3
 13c:	1d c0       	rjmp	.+58     	; 0x178 <Revisarboton+0x3e>
		if (!button_pressed) {
 13e:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <button_pressed.2065>
 142:	81 11       	cpse	r24, r1
 144:	1b c0       	rjmp	.+54     	; 0x17c <Revisarboton+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	89 ef       	ldi	r24, 0xF9	; 249
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <Revisarboton+0x12>
 154:	00 c0       	rjmp	.+0      	; 0x156 <Revisarboton+0x1c>
 156:	00 00       	nop
			_delay_ms(20);
			if (!(PINB & (1 << MODO))) {
 158:	18 99       	sbic	0x03, 0	; 3
 15a:	10 c0       	rjmp	.+32     	; 0x17c <Revisarboton+0x42>
				current_mode = (current_mode + 1) % TOTAL_MODES;
 15c:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <current_mode>
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	63 e0       	ldi	r22, 0x03	; 3
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	0e 94 9f 03 	call	0x73e	; 0x73e <__divmodhi4>
 16c:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <current_mode>
				button_pressed = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <button_pressed.2065>
 176:	08 95       	ret
			}
		}
	} else {
		button_pressed = 0;
 178:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <button_pressed.2065>
 17c:	08 95       	ret

0000017e <display_menu>:
	}
}

void display_menu() {
	UART_writeString("\r\n--- MENÚ ---\r\n");
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
	UART_writeString("1. Modo Manual (control con potenciómetros)\r\n");
 186:	81 e1       	ldi	r24, 0x11	; 17
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
	UART_writeString("2. Modo EEPROM (cargar poses guardadas)\r\n");
 18e:	8f e3       	ldi	r24, 0x3F	; 63
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
	UART_writeString("3. Modo UART\r\n");
 196:	89 e6       	ldi	r24, 0x69	; 105
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
	UART_writeString("Seleccione una opción (o use botón físico): ");
 19e:	88 e7       	ldi	r24, 0x78	; 120
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
 1a6:	08 95       	ret

000001a8 <Guardarpose>:
}

void Guardarpose(uint8_t numpose, uint8_t angles[SERVOSPORPOSE]) {
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	7b 01       	movw	r14, r22
	uint16_t base_addr = numpose * SERVOSPORPOSE;
 1b4:	08 2f       	mov	r16, r24
 1b6:	10 e0       	ldi	r17, 0x00	; 0
 1b8:	00 0f       	add	r16, r16
 1ba:	11 1f       	adc	r17, r17
 1bc:	00 0f       	add	r16, r16
 1be:	11 1f       	adc	r17, r17
	for (uint8_t i = 0; i < SERVOSPORPOSE; i++) {
 1c0:	c0 e0       	ldi	r28, 0x00	; 0
 1c2:	11 c0       	rjmp	.+34     	; 0x1e6 <Guardarpose+0x3e>
		ESCRITURA(angles[i], base_addr + i);
 1c4:	6c 2f       	mov	r22, r28
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	f7 01       	movw	r30, r14
 1ca:	e6 0f       	add	r30, r22
 1cc:	f7 1f       	adc	r31, r23
 1ce:	60 0f       	add	r22, r16
 1d0:	71 1f       	adc	r23, r17
 1d2:	80 81       	ld	r24, Z
 1d4:	0e 94 53 00 	call	0xa6	; 0xa6 <ESCRITURA>
 1d8:	8f e3       	ldi	r24, 0x3F	; 63
 1da:	9c e9       	ldi	r25, 0x9C	; 156
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <Guardarpose+0x34>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <Guardarpose+0x3a>
 1e2:	00 00       	nop
	UART_writeString("Seleccione una opción (o use botón físico): ");
}

void Guardarpose(uint8_t numpose, uint8_t angles[SERVOSPORPOSE]) {
	uint16_t base_addr = numpose * SERVOSPORPOSE;
	for (uint8_t i = 0; i < SERVOSPORPOSE; i++) {
 1e4:	cf 5f       	subi	r28, 0xFF	; 255
 1e6:	c4 30       	cpi	r28, 0x04	; 4
 1e8:	68 f3       	brcs	.-38     	; 0x1c4 <Guardarpose+0x1c>
		ESCRITURA(angles[i], base_addr + i);
		_delay_ms(10);
	}
	UART_writeString("Pose guardada en EEPROM.\r\n");
 1ea:	85 ea       	ldi	r24, 0xA5	; 165
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
}
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	08 95       	ret

000001fe <Cargarpose>:

void Cargarpose(uint8_t pose_index) {
 1fe:	cf 92       	push	r12
 200:	df 92       	push	r13
 202:	ef 92       	push	r14
 204:	ff 92       	push	r15
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	00 d0       	rcall	.+0      	; 0x20e <Cargarpose+0x10>
 20e:	00 d0       	rcall	.+0      	; 0x210 <Cargarpose+0x12>
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
	uint16_t base_addr = pose_index * SERVOSPORPOSE;
 214:	c8 2e       	mov	r12, r24
 216:	d1 2c       	mov	r13, r1
 218:	cc 0c       	add	r12, r12
 21a:	dd 1c       	adc	r13, r13
 21c:	cc 0c       	add	r12, r12
 21e:	dd 1c       	adc	r13, r13
	uint8_t angles[SERVOSPORPOSE];
	for (uint8_t i = 0; i < SERVOSPORPOSE; i++) {
 220:	10 e0       	ldi	r17, 0x00	; 0
 222:	0e c0       	rjmp	.+28     	; 0x240 <Cargarpose+0x42>
		angles[i] = LECTURA(base_addr + i);
 224:	e1 2e       	mov	r14, r17
 226:	f1 2c       	mov	r15, r1
 228:	81 2f       	mov	r24, r17
 22a:	8c 0d       	add	r24, r12
 22c:	0e 94 5f 00 	call	0xbe	; 0xbe <LECTURA>
 230:	e1 e0       	ldi	r30, 0x01	; 1
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	ec 0f       	add	r30, r28
 236:	fd 1f       	adc	r31, r29
 238:	ee 0d       	add	r30, r14
 23a:	ff 1d       	adc	r31, r15
 23c:	80 83       	st	Z, r24
}

void Cargarpose(uint8_t pose_index) {
	uint16_t base_addr = pose_index * SERVOSPORPOSE;
	uint8_t angles[SERVOSPORPOSE];
	for (uint8_t i = 0; i < SERVOSPORPOSE; i++) {
 23e:	1f 5f       	subi	r17, 0xFF	; 255
 240:	14 30       	cpi	r17, 0x04	; 4
 242:	80 f3       	brcs	.-32     	; 0x224 <Cargarpose+0x26>
		angles[i] = LECTURA(base_addr + i);
	}
	PWM_setAngle(angles[0]);
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <PWM_setAngle>
	PWM2_setAngle(angles[1]);
 24a:	8a 81       	ldd	r24, Y+2	; 0x02
 24c:	0e 94 0e 03 	call	0x61c	; 0x61c <PWM2_setAngle>
	PWM3_setAngle(angles[2]);
 250:	8b 81       	ldd	r24, Y+3	; 0x03
 252:	0e 94 23 03 	call	0x646	; 0x646 <PWM3_setAngle>
	PWM4_setAngle(angles[3]);
 256:	8c 81       	ldd	r24, Y+4	; 0x04
 258:	0e 94 50 03 	call	0x6a0	; 0x6a0 <PWM4_setAngle>
}
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	08 95       	ret

00000274 <MenuUART>:

void MenuUART() {
	UART_writeString("\r\n--- MENU DE COMANDOS :) ---\r\n");
 274:	80 ec       	ldi	r24, 0xC0	; 192
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
	UART_writeString("1:Globo ocular DERECHA\r\n");
 27c:	80 ee       	ldi	r24, 0xE0	; 224
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
	UART_writeString("2:Globo ocular IZQUIERDA\r\n");
 284:	89 ef       	ldi	r24, 0xF9	; 249
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
	UART_writeString("3:Guiño IZQUIERDO\r\n");
 28c:	84 e1       	ldi	r24, 0x14	; 20
 28e:	92 e0       	ldi	r25, 0x02	; 2
 290:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
	UART_writeString("4:Guiño DERECHO\r\n");
 294:	88 e2       	ldi	r24, 0x28	; 40
 296:	92 e0       	ldi	r25, 0x02	; 2
 298:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
	UART_writeString("-----------------------\r\n");
 29c:	8a e3       	ldi	r24, 0x3A	; 58
 29e:	92 e0       	ldi	r25, 0x02	; 2
 2a0:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
	UART_writeString("Ingrese comando: ");
 2a4:	84 e5       	ldi	r24, 0x54	; 84
 2a6:	92 e0       	ldi	r25, 0x02	; 2
 2a8:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
 2ac:	08 95       	ret

000002ae <read_button_pressed>:
}

uint8_t read_button_pressed() {
	if (!(PIND & (1 << GUARDADO1))) return 0;
 2ae:	99 b1       	in	r25, 0x09	; 9
 2b0:	89 2f       	mov	r24, r25
 2b2:	80 71       	andi	r24, 0x10	; 16
 2b4:	94 ff       	sbrs	r25, 4
 2b6:	0d c0       	rjmp	.+26     	; 0x2d2 <read_button_pressed+0x24>
	if (!(PIND & (1 << GUARDADO2))) return 1;
 2b8:	4d 9b       	sbis	0x09, 5	; 9
 2ba:	06 c0       	rjmp	.+12     	; 0x2c8 <read_button_pressed+0x1a>
	if (!(PIND & (1 << GUARDADO3))) return 2;
 2bc:	4e 9b       	sbis	0x09, 6	; 9
 2be:	06 c0       	rjmp	.+12     	; 0x2cc <read_button_pressed+0x1e>
	if (!(PIND & (1 << GUARDADO4))) return 3;
 2c0:	4f 99       	sbic	0x09, 7	; 9
 2c2:	06 c0       	rjmp	.+12     	; 0x2d0 <read_button_pressed+0x22>
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	08 95       	ret
	UART_writeString("Ingrese comando: ");
}

uint8_t read_button_pressed() {
	if (!(PIND & (1 << GUARDADO1))) return 0;
	if (!(PIND & (1 << GUARDADO2))) return 1;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	08 95       	ret
	if (!(PIND & (1 << GUARDADO3))) return 2;
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	08 95       	ret
	if (!(PIND & (1 << GUARDADO4))) return 3;
	return 0xFF;
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
}
 2d2:	08 95       	ret

000002d4 <main>:

int main(void) {
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	00 d0       	rcall	.+0      	; 0x2da <main+0x6>
 2da:	00 d0       	rcall	.+0      	; 0x2dc <main+0x8>
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
	UART_init();
 2e0:	0e 94 6f 03 	call	0x6de	; 0x6de <UART_init>
	ADC_init();
 2e4:	0e 94 69 00 	call	0xd2	; 0xd2 <ADC_init>
	PWM_init();
 2e8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <PWM_init>
	PWM2_init();
 2ec:	0e 94 05 03 	call	0x60a	; 0x60a <PWM2_init>
	PWM3_init();
 2f0:	0e 94 19 03 	call	0x632	; 0x632 <PWM3_init>
	PWM4_init();
 2f4:	0e 94 42 03 	call	0x684	; 0x684 <PWM4_init>
	button_init();
 2f8:	0e 94 89 00 	call	0x112	; 0x112 <button_init>
	led_init();
 2fc:	0e 94 96 00 	call	0x12c	; 0x12c <led_init>

	enum Mode previous_mode = TOTAL_MODES; // Para forzar la primera impresión del menú
 300:	13 e0       	ldi	r17, 0x03	; 3
	static uint8_t menu_mostrado = 0; // Para evitar reimprimir el menú UART

	while (1) {
		Revisarboton();
 302:	0e 94 9d 00 	call	0x13a	; 0x13a <Revisarboton>

		// Ya no leemos UDR0 aquí porque se hace en la ISR
		// Solo cambiamos de modo si 'valor' se activó y estamos fuera de UART_MODE
		if (valor && current_mode != UART_MODE) {
 306:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <valor>
 30a:	88 23       	and	r24, r24
 30c:	e9 f0       	breq	.+58     	; 0x348 <main+0x74>
 30e:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <current_mode>
 312:	82 30       	cpi	r24, 0x02	; 2
 314:	c9 f0       	breq	.+50     	; 0x348 <main+0x74>
			switch (caracter) {
 316:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <caracter>
 31a:	82 33       	cpi	r24, 0x32	; 50
 31c:	39 f0       	breq	.+14     	; 0x32c <main+0x58>
 31e:	83 33       	cpi	r24, 0x33	; 51
 320:	49 f0       	breq	.+18     	; 0x334 <main+0x60>
 322:	81 33       	cpi	r24, 0x31	; 49
 324:	59 f4       	brne	.+22     	; 0x33c <main+0x68>
				case '1': current_mode = MANUAL; break;
 326:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <current_mode>
 32a:	0c c0       	rjmp	.+24     	; 0x344 <main+0x70>
				case '2': current_mode = EEPROM_MODE; break;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <current_mode>
 332:	08 c0       	rjmp	.+16     	; 0x344 <main+0x70>
				case '3': current_mode = UART_MODE; break;
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <current_mode>
 33a:	04 c0       	rjmp	.+8      	; 0x344 <main+0x70>
				default: UART_writeString("\r\nOpción inválida.\r\n"); break;
 33c:	86 e6       	ldi	r24, 0x66	; 102
 33e:	92 e0       	ldi	r25, 0x02	; 2
 340:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
			}
			valor = 0; // Limpiamos bandera
 344:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <valor>
		}

		// Si cambia el modo, mostrar mensaje y menú
		if (current_mode != previous_mode) {
 348:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <current_mode>
 34c:	18 17       	cp	r17, r24
 34e:	f9 f0       	breq	.+62     	; 0x38e <main+0xba>
			menu_mostrado = 0; // Reinicia menú UART si cambia el modo
 350:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <__data_end>

			switch (current_mode) {
 354:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <current_mode>
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	49 f0       	breq	.+18     	; 0x36e <main+0x9a>
 35c:	18 f0       	brcs	.+6      	; 0x364 <main+0x90>
 35e:	82 30       	cpi	r24, 0x02	; 2
 360:	59 f0       	breq	.+22     	; 0x378 <main+0xa4>
 362:	0f c0       	rjmp	.+30     	; 0x382 <main+0xae>
				case MANUAL: UART_writeString("\r\nModo Manual activado\r\n"); break;
 364:	8b e7       	ldi	r24, 0x7B	; 123
 366:	92 e0       	ldi	r25, 0x02	; 2
 368:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
 36c:	0c c0       	rjmp	.+24     	; 0x386 <main+0xb2>
				case EEPROM_MODE: UART_writeString("\r\nModo EEPROM activado\r\n"); break;
 36e:	84 e9       	ldi	r24, 0x94	; 148
 370:	92 e0       	ldi	r25, 0x02	; 2
 372:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
 376:	07 c0       	rjmp	.+14     	; 0x386 <main+0xb2>
				case UART_MODE: UART_writeString("\r\nModo UART activado\r\n"); break;
 378:	8d ea       	ldi	r24, 0xAD	; 173
 37a:	92 e0       	ldi	r25, 0x02	; 2
 37c:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
 380:	02 c0       	rjmp	.+4      	; 0x386 <main+0xb2>
				default:
				current_mode = MANUAL; // Valor seguro
 382:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <current_mode>
				break;
			}
			display_menu();
 386:	0e 94 bf 00 	call	0x17e	; 0x17e <display_menu>
			previous_mode = current_mode;
 38a:	10 91 7d 03 	lds	r17, 0x037D	; 0x80037d <current_mode>
		}

		switch (current_mode) {
 38e:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <current_mode>
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	09 f4       	brne	.+2      	; 0x398 <main+0xc4>
 396:	79 c0       	rjmp	.+242    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 398:	20 f0       	brcs	.+8      	; 0x3a2 <main+0xce>
 39a:	82 30       	cpi	r24, 0x02	; 2
 39c:	09 f4       	brne	.+2      	; 0x3a0 <main+0xcc>
 39e:	9a c0       	rjmp	.+308    	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 3a0:	e9 c0       	rjmp	.+466    	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
			case MANUAL: {
				PORTD |= (1 << LED_MANUAL);
 3a2:	8b b1       	in	r24, 0x0b	; 11
 3a4:	84 60       	ori	r24, 0x04	; 4
 3a6:	8b b9       	out	0x0b, r24	; 11
				PORTB &= ~(1 << LED_UART);
 3a8:	85 b1       	in	r24, 0x05	; 5
 3aa:	8f 7e       	andi	r24, 0xEF	; 239
 3ac:	85 b9       	out	0x05, r24	; 5

				uint16_t adc0 = ADC_read(0);
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 70 00 	call	0xe0	; 0xe0 <ADC_read>
 3b4:	3c 01       	movw	r6, r24
				uint16_t adc1 = ADC_read(1);
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 70 00 	call	0xe0	; 0xe0 <ADC_read>
 3bc:	5c 01       	movw	r10, r24
				uint16_t adc2 = ADC_read(2);
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	0e 94 70 00 	call	0xe0	; 0xe0 <ADC_read>
 3c4:	6c 01       	movw	r12, r24
				uint16_t adc3 = ADC_read(3);
 3c6:	83 e0       	ldi	r24, 0x03	; 3
 3c8:	0e 94 70 00 	call	0xe0	; 0xe0 <ADC_read>
 3cc:	7c 01       	movw	r14, r24

				uint8_t angle0 = adc0 * 180UL / 1023;
 3ce:	93 01       	movw	r18, r6
 3d0:	a4 eb       	ldi	r26, 0xB4	; 180
 3d2:	b0 e0       	ldi	r27, 0x00	; 0
 3d4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__umulhisi3>
 3d8:	0f 2e       	mov	r0, r31
 3da:	44 24       	eor	r4, r4
 3dc:	4a 94       	dec	r4
 3de:	f3 e0       	ldi	r31, 0x03	; 3
 3e0:	5f 2e       	mov	r5, r31
 3e2:	61 2c       	mov	r6, r1
 3e4:	71 2c       	mov	r7, r1
 3e6:	f0 2d       	mov	r31, r0
 3e8:	a3 01       	movw	r20, r6
 3ea:	92 01       	movw	r18, r4
 3ec:	0e 94 b3 03 	call	0x766	; 0x766 <__udivmodsi4>
 3f0:	92 2e       	mov	r9, r18
				uint8_t angle1 = adc1 * 180UL / 1023;
 3f2:	95 01       	movw	r18, r10
 3f4:	a4 eb       	ldi	r26, 0xB4	; 180
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__umulhisi3>
 3fc:	a3 01       	movw	r20, r6
 3fe:	92 01       	movw	r18, r4
 400:	0e 94 b3 03 	call	0x766	; 0x766 <__udivmodsi4>
 404:	b2 2e       	mov	r11, r18
				uint8_t angle2 = adc2 * 180UL / 1023;
 406:	96 01       	movw	r18, r12
 408:	a4 eb       	ldi	r26, 0xB4	; 180
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__umulhisi3>
 410:	a3 01       	movw	r20, r6
 412:	92 01       	movw	r18, r4
 414:	0e 94 b3 03 	call	0x766	; 0x766 <__udivmodsi4>
 418:	d2 2e       	mov	r13, r18
				uint8_t angle3 = adc3 * 180UL / 1023;
 41a:	97 01       	movw	r18, r14
 41c:	a4 eb       	ldi	r26, 0xB4	; 180
 41e:	b0 e0       	ldi	r27, 0x00	; 0
 420:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__umulhisi3>
 424:	a3 01       	movw	r20, r6
 426:	92 01       	movw	r18, r4
 428:	0e 94 b3 03 	call	0x766	; 0x766 <__udivmodsi4>
 42c:	f2 2e       	mov	r15, r18

				PWM_setAngle(angle0);
 42e:	89 2d       	mov	r24, r9
 430:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <PWM_setAngle>
				PWM2_setAngle(angle1);
 434:	8b 2d       	mov	r24, r11
 436:	0e 94 0e 03 	call	0x61c	; 0x61c <PWM2_setAngle>
				PWM3_setAngle(angle2);
 43a:	8d 2d       	mov	r24, r13
 43c:	0e 94 23 03 	call	0x646	; 0x646 <PWM3_setAngle>
				PWM4_setAngle(angle3);
 440:	8f 2d       	mov	r24, r15
 442:	0e 94 50 03 	call	0x6a0	; 0x6a0 <PWM4_setAngle>

				uint8_t btn = read_button_pressed();
 446:	0e 94 57 01 	call	0x2ae	; 0x2ae <read_button_pressed>
 44a:	08 2f       	mov	r16, r24
				if (btn != 0xFF) {
 44c:	8f 3f       	cpi	r24, 0xFF	; 255
 44e:	09 f4       	brne	.+2      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 450:	58 cf       	rjmp	.-336    	; 0x302 <main+0x2e>
 452:	2f ef       	ldi	r18, 0xFF	; 255
 454:	80 e7       	ldi	r24, 0x70	; 112
 456:	92 e0       	ldi	r25, 0x02	; 2
 458:	21 50       	subi	r18, 0x01	; 1
 45a:	80 40       	sbci	r24, 0x00	; 0
 45c:	90 40       	sbci	r25, 0x00	; 0
 45e:	e1 f7       	brne	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 462:	00 00       	nop
					_delay_ms(50);
					if (read_button_pressed() == btn) {
 464:	0e 94 57 01 	call	0x2ae	; 0x2ae <read_button_pressed>
 468:	08 13       	cpse	r16, r24
 46a:	4b cf       	rjmp	.-362    	; 0x302 <main+0x2e>
						uint8_t pose[SERVOSPORPOSE] = {angle0, angle1, angle2, angle3};
 46c:	99 82       	std	Y+1, r9	; 0x01
 46e:	ba 82       	std	Y+2, r11	; 0x02
 470:	db 82       	std	Y+3, r13	; 0x03
 472:	fc 82       	std	Y+4, r15	; 0x04
						Guardarpose(btn, pose);
 474:	be 01       	movw	r22, r28
 476:	6f 5f       	subi	r22, 0xFF	; 255
 478:	7f 4f       	sbci	r23, 0xFF	; 255
 47a:	80 2f       	mov	r24, r16
 47c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Guardarpose>
						while (read_button_pressed() == btn);
 480:	0e 94 57 01 	call	0x2ae	; 0x2ae <read_button_pressed>
 484:	08 17       	cp	r16, r24
 486:	e1 f3       	breq	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	3c cf       	rjmp	.-392    	; 0x302 <main+0x2e>
				}
				break;
			}

			case EEPROM_MODE: {
				PORTB &= ~(1 << LED_UART);
 48a:	85 b1       	in	r24, 0x05	; 5
 48c:	8f 7e       	andi	r24, 0xEF	; 239
 48e:	85 b9       	out	0x05, r24	; 5
				PORTD &= ~(1 << LED_MANUAL);
 490:	8b b1       	in	r24, 0x0b	; 11
 492:	8b 7f       	andi	r24, 0xFB	; 251
 494:	8b b9       	out	0x0b, r24	; 11

				uint8_t btn = read_button_pressed();
 496:	0e 94 57 01 	call	0x2ae	; 0x2ae <read_button_pressed>
 49a:	08 2f       	mov	r16, r24
				if (btn != 0xFF) {
 49c:	8f 3f       	cpi	r24, 0xFF	; 255
 49e:	09 f4       	brne	.+2      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4a0:	30 cf       	rjmp	.-416    	; 0x302 <main+0x2e>
 4a2:	2f ef       	ldi	r18, 0xFF	; 255
 4a4:	80 e7       	ldi	r24, 0x70	; 112
 4a6:	92 e0       	ldi	r25, 0x02	; 2
 4a8:	21 50       	subi	r18, 0x01	; 1
 4aa:	80 40       	sbci	r24, 0x00	; 0
 4ac:	90 40       	sbci	r25, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4b2:	00 00       	nop
					_delay_ms(50);
					if (read_button_pressed() == btn) {
 4b4:	0e 94 57 01 	call	0x2ae	; 0x2ae <read_button_pressed>
 4b8:	08 13       	cpse	r16, r24
 4ba:	23 cf       	rjmp	.-442    	; 0x302 <main+0x2e>
						Cargarpose(btn);
 4bc:	80 2f       	mov	r24, r16
 4be:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Cargarpose>
						UART_writeString("Pose cargada desde EEPROM.\r\n");
 4c2:	84 ec       	ldi	r24, 0xC4	; 196
 4c4:	92 e0       	ldi	r25, 0x02	; 2
 4c6:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
						while (read_button_pressed() == btn);
 4ca:	0e 94 57 01 	call	0x2ae	; 0x2ae <read_button_pressed>
 4ce:	08 17       	cp	r16, r24
 4d0:	e1 f3       	breq	.-8      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4d2:	17 cf       	rjmp	.-466    	; 0x302 <main+0x2e>
				}
				break;
			}

			case UART_MODE: {
				PORTB |= (1 << LED_UART);
 4d4:	85 b1       	in	r24, 0x05	; 5
 4d6:	80 61       	ori	r24, 0x10	; 16
 4d8:	85 b9       	out	0x05, r24	; 5
				PORTD &= ~(1 << LED_MANUAL);
 4da:	8b b1       	in	r24, 0x0b	; 11
 4dc:	8b 7f       	andi	r24, 0xFB	; 251
 4de:	8b b9       	out	0x0b, r24	; 11

				if (!menu_mostrado) {
 4e0:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <__data_end>
 4e4:	81 11       	cpse	r24, r1
 4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					MenuUART();
 4e8:	0e 94 3a 01 	call	0x274	; 0x274 <MenuUART>
					menu_mostrado = 1;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <__data_end>
				}

				if (valor) {
 4f2:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <valor>
 4f6:	88 23       	and	r24, r24
 4f8:	09 f4       	brne	.+2      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4fa:	03 cf       	rjmp	.-506    	; 0x302 <main+0x2e>
					switch (caracter) {
 4fc:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <caracter>
 500:	82 33       	cpi	r24, 0x32	; 50
 502:	89 f0       	breq	.+34     	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
 504:	18 f4       	brcc	.+6      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 506:	81 33       	cpi	r24, 0x31	; 49
 508:	31 f0       	breq	.+12     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 50a:	2b c0       	rjmp	.+86     	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
 50c:	83 33       	cpi	r24, 0x33	; 51
 50e:	99 f0       	breq	.+38     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 510:	84 33       	cpi	r24, 0x34	; 52
 512:	e1 f0       	breq	.+56     	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 514:	26 c0       	rjmp	.+76     	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
						case '1': OCR2A = 23; UART_writeString("\r\nGlobo ocular DERECHA\r\n"); break;
 516:	87 e1       	ldi	r24, 0x17	; 23
 518:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 51c:	81 ee       	ldi	r24, 0xE1	; 225
 51e:	92 e0       	ldi	r25, 0x02	; 2
 520:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
 524:	22 c0       	rjmp	.+68     	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
						case '2': OCR2B = 9;  UART_writeString("\r\nGlobo ocular IZQUIERDA\r\n"); break;
 526:	89 e0       	ldi	r24, 0x09	; 9
 528:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 52c:	8a ef       	ldi	r24, 0xFA	; 250
 52e:	92 e0       	ldi	r25, 0x02	; 2
 530:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
 534:	1a c0       	rjmp	.+52     	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
						case '3': OCR1A = 60;  UART_writeString("\r\nCerrando párpado IZQUIERDO\r\n"); break;
 536:	8c e3       	ldi	r24, 0x3C	; 60
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 53e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 542:	85 e1       	ldi	r24, 0x15	; 21
 544:	93 e0       	ldi	r25, 0x03	; 3
 546:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
 54a:	0f c0       	rjmp	.+30     	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
						case '4': OCR1B = 25; UART_writeString("\r\nCerrando párpado DERECHO\r\n"); break;
 54c:	89 e1       	ldi	r24, 0x19	; 25
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 554:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 558:	84 e3       	ldi	r24, 0x34	; 52
 55a:	93 e0       	ldi	r25, 0x03	; 3
 55c:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
 560:	04 c0       	rjmp	.+8      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
						default: UART_writeString("\r\nComando no válido. Intente de nuevo.\r\n"); break;
 562:	81 e5       	ldi	r24, 0x51	; 81
 564:	93 e0       	ldi	r25, 0x03	; 3
 566:	0e 94 8c 03 	call	0x718	; 0x718 <UART_writeString>
					}
					valor = 0;
 56a:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <valor>
					MenuUART(); // Muestra de nuevo el prompt para comando
 56e:	0e 94 3a 01 	call	0x274	; 0x274 <MenuUART>
 572:	c7 ce       	rjmp	.-626    	; 0x302 <main+0x2e>
				}
				break;
			}

			default:
			current_mode = MANUAL;
 574:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <current_mode>
			break;
 578:	c4 ce       	rjmp	.-632    	; 0x302 <main+0x2e>

0000057a <__vector_18>:
		}
	}
}

ISR(USART_RX_vect) {
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	4f 93       	push	r20
 58a:	5f 93       	push	r21
 58c:	6f 93       	push	r22
 58e:	7f 93       	push	r23
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	af 93       	push	r26
 596:	bf 93       	push	r27
 598:	ef 93       	push	r30
 59a:	ff 93       	push	r31
	caracter = UDR0;
 59c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5a0:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <caracter>
	valor = 1;
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <valor>
	UART_writeChar(caracter);
 5aa:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <caracter>
 5ae:	0e 94 85 03 	call	0x70a	; 0x70a <UART_writeChar>
 5b2:	ff 91       	pop	r31
 5b4:	ef 91       	pop	r30
 5b6:	bf 91       	pop	r27
 5b8:	af 91       	pop	r26
 5ba:	9f 91       	pop	r25
 5bc:	8f 91       	pop	r24
 5be:	7f 91       	pop	r23
 5c0:	6f 91       	pop	r22
 5c2:	5f 91       	pop	r21
 5c4:	4f 91       	pop	r20
 5c6:	3f 91       	pop	r19
 5c8:	2f 91       	pop	r18
 5ca:	0f 90       	pop	r0
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	0f 90       	pop	r0
 5d0:	1f 90       	pop	r1
 5d2:	18 95       	reti

000005d4 <PWM_init>:
 */ 
#include "SERVO1.h"

void PWM_init() {
	// Fast PWM, modo 14: TOP = ICR1
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 5d4:	82 e8       	ldi	r24, 0x82	; 130
 5d6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // prescaler 8
 5da:	8a e1       	ldi	r24, 0x1A	; 26
 5dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = 40000; // TOP = 20 ms con reloj de 16MHz y prescaler 8
 5e0:	80 e4       	ldi	r24, 0x40	; 64
 5e2:	9c e9       	ldi	r25, 0x9C	; 156
 5e4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 5e8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB |= (1 << PB1); // OC1A (D9) como salida
 5ec:	84 b1       	in	r24, 0x04	; 4
 5ee:	82 60       	ori	r24, 0x02	; 2
 5f0:	84 b9       	out	0x04, r24	; 4
 5f2:	08 95       	ret

000005f4 <PWM_setAngle>:
}

void PWM_setAngle(uint8_t angle) {
	// Mapear 0-180° a 1-2 ms ? 2000 a 4000 ticks (0.5 us cada tick)
	uint16_t ticks = 4000 + (angle * 11); // 11 = (2000/180)
 5f4:	2b e0       	ldi	r18, 0x0B	; 11
 5f6:	82 9f       	mul	r24, r18
 5f8:	c0 01       	movw	r24, r0
 5fa:	11 24       	eor	r1, r1
 5fc:	80 56       	subi	r24, 0x60	; 96
 5fe:	90 4f       	sbci	r25, 0xF0	; 240
	OCR1A = ticks;
 600:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 604:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 608:	08 95       	ret

0000060a <PWM2_init>:
 *  Author: Javie
 */ 
#include "SERVO2.h"

void PWM2_init() {
	TCCR1A |= (1 << COM1B1); // No invertido
 60a:	e0 e8       	ldi	r30, 0x80	; 128
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	80 62       	ori	r24, 0x20	; 32
 612:	80 83       	st	Z, r24
	DDRB |= (1 << PB2); 
 614:	84 b1       	in	r24, 0x04	; 4
 616:	84 60       	ori	r24, 0x04	; 4
 618:	84 b9       	out	0x04, r24	; 4
 61a:	08 95       	ret

0000061c <PWM2_setAngle>:
}

void PWM2_setAngle(uint8_t angle) {
	uint16_t ticks = 2000 + (angle * 11); // Mapear 0°180° a 20004000 ticks
 61c:	2b e0       	ldi	r18, 0x0B	; 11
 61e:	82 9f       	mul	r24, r18
 620:	c0 01       	movw	r24, r0
 622:	11 24       	eor	r1, r1
 624:	80 53       	subi	r24, 0x30	; 48
 626:	98 4f       	sbci	r25, 0xF8	; 248
	OCR1B = ticks;
 628:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 62c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 630:	08 95       	ret

00000632 <PWM3_init>:
 *  Author: Javie
 */ 
#include "SERVO3.h"

void PWM3_init() {
	DDRB |= (1 << PB3); // OC2A como salida
 632:	84 b1       	in	r24, 0x04	; 4
 634:	88 60       	ori	r24, 0x08	; 8
 636:	84 b9       	out	0x04, r24	; 4

	// Fast PWM con TOP=OCR2A no es posible, usamos modo normal con prescaler alto
	TCCR2A = (1 << COM2A1) | (1 << WGM20) | (1 << WGM21); // Fast PWM
 638:	83 e8       	ldi	r24, 0x83	; 131
 63a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);     // Prescaler 1024 (~61 Hz)
 63e:	87 e0       	ldi	r24, 0x07	; 7
 640:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 644:	08 95       	ret

00000646 <PWM3_setAngle>:
}

void PWM3_setAngle(uint8_t angle) {
	// Mapeo reducido para 8 bits (0255) resolución pobre
	// Pulso de 1ms ~ 16, 2ms ~ 32 (con prescaler 1024 y 16MHz)
	uint8_t ticks = 16 + (angle * 16UL / 180); // entre 16 y 32 aprox
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	a0 e0       	ldi	r26, 0x00	; 0
 64a:	b0 e0       	ldi	r27, 0x00	; 0
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	aa 1f       	adc	r26, r26
 652:	bb 1f       	adc	r27, r27
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	aa 1f       	adc	r26, r26
 65a:	bb 1f       	adc	r27, r27
 65c:	bc 01       	movw	r22, r24
 65e:	cd 01       	movw	r24, r26
 660:	66 0f       	add	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	88 1f       	adc	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	66 0f       	add	r22, r22
 66a:	77 1f       	adc	r23, r23
 66c:	88 1f       	adc	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	24 eb       	ldi	r18, 0xB4	; 180
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	40 e0       	ldi	r20, 0x00	; 0
 676:	50 e0       	ldi	r21, 0x00	; 0
 678:	0e 94 b3 03 	call	0x766	; 0x766 <__udivmodsi4>
 67c:	20 5f       	subi	r18, 0xF0	; 240
	OCR2A = ticks;
 67e:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 682:	08 95       	ret

00000684 <PWM4_init>:
 *  Author: Javie
 */ 
#include "SERVO4.h"

void PWM4_init() {
	DDRD |= (1 << PD3); // OC2B como salida
 684:	8a b1       	in	r24, 0x0a	; 10
 686:	88 60       	ori	r24, 0x08	; 8
 688:	8a b9       	out	0x0a, r24	; 10

	TCCR2A |= (1 << COM2B1) | (1 << WGM20) | (1 << WGM21); // Fast PWM
 68a:	e0 eb       	ldi	r30, 0xB0	; 176
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	83 62       	ori	r24, 0x23	; 35
 692:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);     // Prescaler 1024
 694:	e1 eb       	ldi	r30, 0xB1	; 177
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	87 60       	ori	r24, 0x07	; 7
 69c:	80 83       	st	Z, r24
 69e:	08 95       	ret

000006a0 <PWM4_setAngle>:
}

void PWM4_setAngle(uint8_t angle) {
	uint8_t ticks = 16 + (angle * 16UL / 180);
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	a0 e0       	ldi	r26, 0x00	; 0
 6a4:	b0 e0       	ldi	r27, 0x00	; 0
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	aa 1f       	adc	r26, r26
 6ac:	bb 1f       	adc	r27, r27
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	aa 1f       	adc	r26, r26
 6b4:	bb 1f       	adc	r27, r27
 6b6:	bc 01       	movw	r22, r24
 6b8:	cd 01       	movw	r24, r26
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	66 0f       	add	r22, r22
 6c4:	77 1f       	adc	r23, r23
 6c6:	88 1f       	adc	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	24 eb       	ldi	r18, 0xB4	; 180
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	40 e0       	ldi	r20, 0x00	; 0
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	0e 94 b3 03 	call	0x766	; 0x766 <__udivmodsi4>
 6d6:	20 5f       	subi	r18, 0xF0	; 240
	OCR2B = ticks;
 6d8:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 6dc:	08 95       	ret

000006de <UART_init>:
#include <avr/interrupt.h>
#include "TEXTO.h"

void UART_init(void) {
	
	DDRD |= (1 << DDD1); // TX salida
 6de:	8a b1       	in	r24, 0x0a	; 10
 6e0:	82 60       	ori	r24, 0x02	; 2
 6e2:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD0); // RX entrada
 6e4:	8a b1       	in	r24, 0x0a	; 10
 6e6:	8e 7f       	andi	r24, 0xFE	; 254
 6e8:	8a b9       	out	0x0a, r24	; 10
	sei(); // Habilita interrupciones globales
 6ea:	78 94       	sei
	UCSR0A = 0;
 6ec:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
 6f0:	88 e9       	ldi	r24, 0x98	; 152
 6f2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 6f6:	86 e0       	ldi	r24, 0x06	; 6
 6f8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0 = 103; // 9600 baudios @16MHz
 6fc:	87 e6       	ldi	r24, 0x67	; 103
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 704:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 708:	08 95       	ret

0000070a <UART_writeChar>:
}

void UART_writeChar(char caracter) {
	while (!(UCSR0A & (1 << UDRE0)));
 70a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 70e:	95 ff       	sbrs	r25, 5
 710:	fc cf       	rjmp	.-8      	; 0x70a <UART_writeChar>
	UDR0 = caracter;
 712:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 716:	08 95       	ret

00000718 <UART_writeString>:
}

void UART_writeString(char* texto) {
 718:	0f 93       	push	r16
 71a:	1f 93       	push	r17
 71c:	cf 93       	push	r28
 71e:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; texto[i] != '\0'; i++) {
 720:	c0 e0       	ldi	r28, 0x00	; 0
 722:	03 c0       	rjmp	.+6      	; 0x72a <UART_writeString+0x12>
		UART_writeChar(texto[i]);
 724:	0e 94 85 03 	call	0x70a	; 0x70a <UART_writeChar>
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = caracter;
}

void UART_writeString(char* texto) {
	for (uint8_t i = 0; texto[i] != '\0'; i++) {
 728:	cf 5f       	subi	r28, 0xFF	; 255
 72a:	f8 01       	movw	r30, r16
 72c:	ec 0f       	add	r30, r28
 72e:	f1 1d       	adc	r31, r1
 730:	80 81       	ld	r24, Z
 732:	81 11       	cpse	r24, r1
 734:	f7 cf       	rjmp	.-18     	; 0x724 <UART_writeString+0xc>
		UART_writeChar(texto[i]);
	}
 736:	cf 91       	pop	r28
 738:	1f 91       	pop	r17
 73a:	0f 91       	pop	r16
 73c:	08 95       	ret

0000073e <__divmodhi4>:
 73e:	97 fb       	bst	r25, 7
 740:	07 2e       	mov	r0, r23
 742:	16 f4       	brtc	.+4      	; 0x748 <__divmodhi4+0xa>
 744:	00 94       	com	r0
 746:	07 d0       	rcall	.+14     	; 0x756 <__divmodhi4_neg1>
 748:	77 fd       	sbrc	r23, 7
 74a:	09 d0       	rcall	.+18     	; 0x75e <__divmodhi4_neg2>
 74c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__udivmodhi4>
 750:	07 fc       	sbrc	r0, 7
 752:	05 d0       	rcall	.+10     	; 0x75e <__divmodhi4_neg2>
 754:	3e f4       	brtc	.+14     	; 0x764 <__divmodhi4_exit>

00000756 <__divmodhi4_neg1>:
 756:	90 95       	com	r25
 758:	81 95       	neg	r24
 75a:	9f 4f       	sbci	r25, 0xFF	; 255
 75c:	08 95       	ret

0000075e <__divmodhi4_neg2>:
 75e:	70 95       	com	r23
 760:	61 95       	neg	r22
 762:	7f 4f       	sbci	r23, 0xFF	; 255

00000764 <__divmodhi4_exit>:
 764:	08 95       	ret

00000766 <__udivmodsi4>:
 766:	a1 e2       	ldi	r26, 0x21	; 33
 768:	1a 2e       	mov	r1, r26
 76a:	aa 1b       	sub	r26, r26
 76c:	bb 1b       	sub	r27, r27
 76e:	fd 01       	movw	r30, r26
 770:	0d c0       	rjmp	.+26     	; 0x78c <__udivmodsi4_ep>

00000772 <__udivmodsi4_loop>:
 772:	aa 1f       	adc	r26, r26
 774:	bb 1f       	adc	r27, r27
 776:	ee 1f       	adc	r30, r30
 778:	ff 1f       	adc	r31, r31
 77a:	a2 17       	cp	r26, r18
 77c:	b3 07       	cpc	r27, r19
 77e:	e4 07       	cpc	r30, r20
 780:	f5 07       	cpc	r31, r21
 782:	20 f0       	brcs	.+8      	; 0x78c <__udivmodsi4_ep>
 784:	a2 1b       	sub	r26, r18
 786:	b3 0b       	sbc	r27, r19
 788:	e4 0b       	sbc	r30, r20
 78a:	f5 0b       	sbc	r31, r21

0000078c <__udivmodsi4_ep>:
 78c:	66 1f       	adc	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	88 1f       	adc	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	1a 94       	dec	r1
 796:	69 f7       	brne	.-38     	; 0x772 <__udivmodsi4_loop>
 798:	60 95       	com	r22
 79a:	70 95       	com	r23
 79c:	80 95       	com	r24
 79e:	90 95       	com	r25
 7a0:	9b 01       	movw	r18, r22
 7a2:	ac 01       	movw	r20, r24
 7a4:	bd 01       	movw	r22, r26
 7a6:	cf 01       	movw	r24, r30
 7a8:	08 95       	ret

000007aa <__umulhisi3>:
 7aa:	a2 9f       	mul	r26, r18
 7ac:	b0 01       	movw	r22, r0
 7ae:	b3 9f       	mul	r27, r19
 7b0:	c0 01       	movw	r24, r0
 7b2:	a3 9f       	mul	r26, r19
 7b4:	70 0d       	add	r23, r0
 7b6:	81 1d       	adc	r24, r1
 7b8:	11 24       	eor	r1, r1
 7ba:	91 1d       	adc	r25, r1
 7bc:	b2 9f       	mul	r27, r18
 7be:	70 0d       	add	r23, r0
 7c0:	81 1d       	adc	r24, r1
 7c2:	11 24       	eor	r1, r1
 7c4:	91 1d       	adc	r25, r1
 7c6:	08 95       	ret

000007c8 <__udivmodhi4>:
 7c8:	aa 1b       	sub	r26, r26
 7ca:	bb 1b       	sub	r27, r27
 7cc:	51 e1       	ldi	r21, 0x11	; 17
 7ce:	07 c0       	rjmp	.+14     	; 0x7de <__udivmodhi4_ep>

000007d0 <__udivmodhi4_loop>:
 7d0:	aa 1f       	adc	r26, r26
 7d2:	bb 1f       	adc	r27, r27
 7d4:	a6 17       	cp	r26, r22
 7d6:	b7 07       	cpc	r27, r23
 7d8:	10 f0       	brcs	.+4      	; 0x7de <__udivmodhi4_ep>
 7da:	a6 1b       	sub	r26, r22
 7dc:	b7 0b       	sbc	r27, r23

000007de <__udivmodhi4_ep>:
 7de:	88 1f       	adc	r24, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	5a 95       	dec	r21
 7e4:	a9 f7       	brne	.-22     	; 0x7d0 <__udivmodhi4_loop>
 7e6:	80 95       	com	r24
 7e8:	90 95       	com	r25
 7ea:	bc 01       	movw	r22, r24
 7ec:	cd 01       	movw	r24, r26
 7ee:	08 95       	ret

000007f0 <_exit>:
 7f0:	f8 94       	cli

000007f2 <__stop_program>:
 7f2:	ff cf       	rjmp	.-2      	; 0x7f2 <__stop_program>
