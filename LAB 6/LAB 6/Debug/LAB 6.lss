
LAB 6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  000002fa  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  008001bc  008001bc  0000044a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba5  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000824  00000000  00000000  000010f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000539  00000000  00000000  0000191d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015a  00000000  00000000  0000237a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3b       	cpi	r26, 0xBC	; 188
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac eb       	ldi	r26, 0xBC	; 188
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 3b       	cpi	r26, 0xBF	; 191
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 75 00 	call	0xea	; 0xea <main>
  9e:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
		}
	}
}

void setup(void) {
	cli(); // Desactivar interrupciones globales
  a6:	f8 94       	cli

	// Configurar LEDs
	DDRB |= 0x1F; // PB0-PB4 salida
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	8f 61       	ori	r24, 0x1F	; 31
  ac:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDD5) | (1 << DDD6) | (1 << DDD7); // PD5-PD7 salida
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	80 6e       	ori	r24, 0xE0	; 224
  b2:	8a b9       	out	0x0a, r24	; 10
	
	PORTB = 0x00;
  b4:	15 b8       	out	0x05, r1	; 5
	PORTD &= ~((1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7));
  b6:	8b b1       	in	r24, 0x0b	; 11
  b8:	8f 71       	andi	r24, 0x1F	; 31
  ba:	8b b9       	out	0x0b, r24	; 11
	
	UART_init(); // Inicializar UART
  bc:	0e 94 14 01 	call	0x228	; 0x228 <UART_init>
	ADC_init();  // Inicializar ADC
  c0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <ADC_init>

	sei(); // Activar interrupciones globales
  c4:	78 94       	sei
  c6:	08 95       	ret

000000c8 <mostrarMenu>:
}

void mostrarMenu(void) {
	UART_writeString("\n----- MENU -----\n");
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	0e 94 30 01 	call	0x260	; 0x260 <UART_writeString>
	UART_writeString("1. Leer Potenciometro\n");
  d0:	83 e1       	ldi	r24, 0x13	; 19
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	0e 94 30 01 	call	0x260	; 0x260 <UART_writeString>
	UART_writeString("2. Enviar Ascii\n");
  d8:	8a e2       	ldi	r24, 0x2A	; 42
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 30 01 	call	0x260	; 0x260 <UART_writeString>
	UART_writeString("Seleccione una opcion: ");
  e0:	8b e3       	ldi	r24, 0x3B	; 59
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	0e 94 30 01 	call	0x260	; 0x260 <UART_writeString>
  e8:	08 95       	ret

000000ea <main>:
volatile char received_char;
volatile uint8_t new_data = 0;
volatile uint8_t ascii_mode = 0;

int main(void) {
	setup();
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	mostrarMenu();
  ee:	0e 94 64 00 	call	0xc8	; 0xc8 <mostrarMenu>
	
	while (1) {
		if (new_data) {
  f2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <new_data>
  f6:	88 23       	and	r24, r24
  f8:	e1 f3       	breq	.-8      	; 0xf2 <main+0x8>
			new_data = 0;
  fa:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <new_data>
			
			if (ascii_mode == 0) { // Modo menú
  fe:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
 102:	81 11       	cpse	r24, r1
 104:	34 c0       	rjmp	.+104    	; 0x16e <main+0x84>
				if (received_char == '1') { // Leer potenciómetro
 106:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <received_char>
 10a:	81 33       	cpi	r24, 0x31	; 49
 10c:	d9 f4       	brne	.+54     	; 0x144 <main+0x5a>
					uint8_t valor = ADC_read(0); // Canal A0
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <ADC_read>
 114:	c8 2f       	mov	r28, r24
					
					// Mostrar en LEDs
					PORTB = valor & 0x1F; // bits 0-4 a PORTB
 116:	8f 71       	andi	r24, 0x1F	; 31
 118:	85 b9       	out	0x05, r24	; 5
					PORTD = (PORTD & 0x1F) | (valor & 0xE0); // bits 5-7 a PD5-PD7
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	98 2f       	mov	r25, r24
 11e:	9f 71       	andi	r25, 0x1F	; 31
 120:	8c 2f       	mov	r24, r28
 122:	80 7e       	andi	r24, 0xE0	; 224
 124:	89 2b       	or	r24, r25
 126:	8b b9       	out	0x0b, r24	; 11
					
					// Mostrar en terminal
					UART_writeString("\nValor del potenciómetro (0-255): ");
 128:	83 e5       	ldi	r24, 0x53	; 83
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 30 01 	call	0x260	; 0x260 <UART_writeString>
					UART_mostrarValor(valor);
 130:	8c 2f       	mov	r24, r28
 132:	0e 94 43 01 	call	0x286	; 0x286 <UART_mostrarValor>
					UART_writeString("\n");
 136:	81 e1       	ldi	r24, 0x11	; 17
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 30 01 	call	0x260	; 0x260 <UART_writeString>
					
					mostrarMenu();
 13e:	0e 94 64 00 	call	0xc8	; 0xc8 <mostrarMenu>
 142:	d7 cf       	rjmp	.-82     	; 0xf2 <main+0x8>
				}
				else if (received_char == '2') { // Enviar ASCII
 144:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <received_char>
 148:	82 33       	cpi	r24, 0x32	; 50
 14a:	51 f4       	brne	.+20     	; 0x160 <main+0x76>
					UART_writeString("\nIngrese un caracter ASCII: ");
 14c:	86 e7       	ldi	r24, 0x76	; 118
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 30 01 	call	0x260	; 0x260 <UART_writeString>
					ascii_mode = 1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
					new_data = 0; // Esperar nuevo caracter
 15a:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <new_data>
 15e:	c9 cf       	rjmp	.-110    	; 0xf2 <main+0x8>
				}
				else { // Opción inválida
					UART_writeString("\nOpcion invalida.\n");
 160:	83 e9       	ldi	r24, 0x93	; 147
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 30 01 	call	0x260	; 0x260 <UART_writeString>
					mostrarMenu();
 168:	0e 94 64 00 	call	0xc8	; 0xc8 <mostrarMenu>
 16c:	c2 cf       	rjmp	.-124    	; 0xf2 <main+0x8>
				}
			}
			else if (ascii_mode == 1) { // Modo ASCII
 16e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	09 f0       	breq	.+2      	; 0x178 <main+0x8e>
 176:	bd cf       	rjmp	.-134    	; 0xf2 <main+0x8>
				// Mostrar en LEDs
				PORTB = received_char & 0x1F;
 178:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <received_char>
 17c:	8f 71       	andi	r24, 0x1F	; 31
 17e:	85 b9       	out	0x05, r24	; 5
				PORTD = (PORTD & 0x1F) | ((received_char & 0xE0) >> 3);
 180:	2b b1       	in	r18, 0x0b	; 11
 182:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <received_char>
 186:	90 7e       	andi	r25, 0xE0	; 224
 188:	89 2f       	mov	r24, r25
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	95 95       	asr	r25
 18e:	87 95       	ror	r24
 190:	95 95       	asr	r25
 192:	87 95       	ror	r24
 194:	95 95       	asr	r25
 196:	87 95       	ror	r24
 198:	92 2f       	mov	r25, r18
 19a:	9f 71       	andi	r25, 0x1F	; 31
 19c:	89 2b       	or	r24, r25
 19e:	8b b9       	out	0x0b, r24	; 11
				
				UART_writeString("\nCaracter recibido: ");
 1a0:	86 ea       	ldi	r24, 0xA6	; 166
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 30 01 	call	0x260	; 0x260 <UART_writeString>
				UART_writeChar(received_char);
 1a8:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <received_char>
 1ac:	0e 94 29 01 	call	0x252	; 0x252 <UART_writeChar>
				UART_writeString("\n");
 1b0:	81 e1       	ldi	r24, 0x11	; 17
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 30 01 	call	0x260	; 0x260 <UART_writeString>
				
				ascii_mode = 0; // Volver al menú
 1b8:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <__data_end>
				mostrarMenu();
 1bc:	0e 94 64 00 	call	0xc8	; 0xc8 <mostrarMenu>
 1c0:	98 cf       	rjmp	.-208    	; 0xf2 <main+0x8>

000001c2 <__vector_18>:
	UART_writeString("2. Enviar Ascii\n");
	UART_writeString("Seleccione una opcion: ");
}

// ISR para recibir datos UART
ISR(USART_RX_vect) {
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	8f 93       	push	r24
	received_char = UDR0;
 1ce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1d2:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <received_char>
	new_data = 1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <new_data>
}
 1dc:	8f 91       	pop	r24
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <ADC_init>:
 *  Author: Javie
 */ 
#include "post.h"

void ADC_init(void) {
	ADMUX = (1 << REFS0); // Referencia AVcc
 1e8:	80 e4       	ldi	r24, 0x40	; 64
 1ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC y prescaler de 128
 1ee:	87 e8       	ldi	r24, 0x87	; 135
 1f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1f4:	08 95       	ret

000001f6 <ADC_read>:
}

uint8_t ADC_read(uint8_t canal) {
	ADMUX = (ADMUX & 0xF0) | (canal & 0x0F); // Seleccionar canal
 1f6:	ec e7       	ldi	r30, 0x7C	; 124
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	90 81       	ld	r25, Z
 1fc:	90 7f       	andi	r25, 0xF0	; 240
 1fe:	8f 70       	andi	r24, 0x0F	; 15
 200:	89 2b       	or	r24, r25
 202:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Iniciar conversión
 204:	ea e7       	ldi	r30, 0x7A	; 122
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	80 64       	ori	r24, 0x40	; 64
 20c:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // Esperar a que termine
 20e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 212:	86 fd       	sbrc	r24, 6
 214:	fc cf       	rjmp	.-8      	; 0x20e <ADC_read+0x18>
	return ADC >> 2; // Convertir de 10 bits a 8 bits
 216:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 21a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 21e:	96 95       	lsr	r25
 220:	87 95       	ror	r24
 222:	96 95       	lsr	r25
 224:	87 95       	ror	r24
}
 226:	08 95       	ret

00000228 <UART_init>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void UART_init(void) {
	DDRD |= (1 << DDD1); // TX salida
 228:	8a b1       	in	r24, 0x0a	; 10
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD0); // RX entrada
 22e:	8a b1       	in	r24, 0x0a	; 10
 230:	8e 7f       	andi	r24, 0xFE	; 254
 232:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A = 0;
 234:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
 238:	88 e9       	ldi	r24, 0x98	; 152
 23a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 23e:	86 e0       	ldi	r24, 0x06	; 6
 240:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0 = 103; // 9600 baudios @16MHz
 244:	87 e6       	ldi	r24, 0x67	; 103
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 24c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 250:	08 95       	ret

00000252 <UART_writeChar>:
}

void UART_writeChar(char caracter) {
	while (!(UCSR0A & (1 << UDRE0)));
 252:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 256:	95 ff       	sbrs	r25, 5
 258:	fc cf       	rjmp	.-8      	; 0x252 <UART_writeChar>
	UDR0 = caracter;
 25a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 25e:	08 95       	ret

00000260 <UART_writeString>:
}

void UART_writeString(char* texto) {
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; texto[i] != '\0'; i++) {
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	03 c0       	rjmp	.+6      	; 0x272 <UART_writeString+0x12>
		UART_writeChar(texto[i]);
 26c:	0e 94 29 01 	call	0x252	; 0x252 <UART_writeChar>
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = caracter;
}

void UART_writeString(char* texto) {
	for (uint8_t i = 0; texto[i] != '\0'; i++) {
 270:	cf 5f       	subi	r28, 0xFF	; 255
 272:	f8 01       	movw	r30, r16
 274:	ec 0f       	add	r30, r28
 276:	f1 1d       	adc	r31, r1
 278:	80 81       	ld	r24, Z
 27a:	81 11       	cpse	r24, r1
 27c:	f7 cf       	rjmp	.-18     	; 0x26c <UART_writeString+0xc>
		UART_writeChar(texto[i]);
	}
}
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	08 95       	ret

00000286 <UART_mostrarValor>:

// Mostrar número
void UART_mostrarValor(uint8_t valor) {
 286:	cf 93       	push	r28
 288:	c8 2f       	mov	r28, r24
	if (valor >= 100) {
 28a:	84 36       	cpi	r24, 0x64	; 100
 28c:	48 f0       	brcs	.+18     	; 0x2a0 <UART_mostrarValor+0x1a>
		UART_writeChar('0' + (valor / 100));
 28e:	89 e2       	ldi	r24, 0x29	; 41
 290:	c8 9f       	mul	r28, r24
 292:	81 2d       	mov	r24, r1
 294:	11 24       	eor	r1, r1
 296:	82 95       	swap	r24
 298:	8f 70       	andi	r24, 0x0F	; 15
 29a:	80 5d       	subi	r24, 0xD0	; 208
 29c:	0e 94 29 01 	call	0x252	; 0x252 <UART_writeChar>
	}
	if (valor >= 10) {
 2a0:	ca 30       	cpi	r28, 0x0A	; 10
 2a2:	b0 f0       	brcs	.+44     	; 0x2d0 <UART_mostrarValor+0x4a>
		UART_writeChar('0' + ((valor / 10) % 10));
 2a4:	9d ec       	ldi	r25, 0xCD	; 205
 2a6:	c9 9f       	mul	r28, r25
 2a8:	81 2d       	mov	r24, r1
 2aa:	11 24       	eor	r1, r1
 2ac:	86 95       	lsr	r24
 2ae:	86 95       	lsr	r24
 2b0:	86 95       	lsr	r24
 2b2:	89 9f       	mul	r24, r25
 2b4:	91 2d       	mov	r25, r1
 2b6:	11 24       	eor	r1, r1
 2b8:	96 95       	lsr	r25
 2ba:	96 95       	lsr	r25
 2bc:	96 95       	lsr	r25
 2be:	99 0f       	add	r25, r25
 2c0:	29 2f       	mov	r18, r25
 2c2:	22 0f       	add	r18, r18
 2c4:	22 0f       	add	r18, r18
 2c6:	92 0f       	add	r25, r18
 2c8:	89 1b       	sub	r24, r25
 2ca:	80 5d       	subi	r24, 0xD0	; 208
 2cc:	0e 94 29 01 	call	0x252	; 0x252 <UART_writeChar>
	}
	UART_writeChar('0' + (valor % 10));
 2d0:	9d ec       	ldi	r25, 0xCD	; 205
 2d2:	c9 9f       	mul	r28, r25
 2d4:	91 2d       	mov	r25, r1
 2d6:	11 24       	eor	r1, r1
 2d8:	96 95       	lsr	r25
 2da:	96 95       	lsr	r25
 2dc:	96 95       	lsr	r25
 2de:	99 0f       	add	r25, r25
 2e0:	89 2f       	mov	r24, r25
 2e2:	88 0f       	add	r24, r24
 2e4:	88 0f       	add	r24, r24
 2e6:	98 0f       	add	r25, r24
 2e8:	8c 2f       	mov	r24, r28
 2ea:	89 1b       	sub	r24, r25
 2ec:	80 5d       	subi	r24, 0xD0	; 208
 2ee:	0e 94 29 01 	call	0x252	; 0x252 <UART_writeChar>
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
